{"version":3,"sources":["component/page.js","container/ConnectedPage.js","StorageWrapper.js","catsHOC.js","reducer/index.js","redux/store.js","helpers/axios.instance.js","config.js","component/req.js","hoc.js","App.js","wrapper.js","serviceWorker.js","index.js"],"names":["Page","handler","onClick","defaultProps","console","log","connect","state","data","initData","dispatch","type","StorageContext","React","createContext","Storage","cats","name","addCat","newCats","push","setState","children","this","props","Provider","value","Component","CatsProvider","params","title","postsInitialState","loaded","loading","errors","text","postsReducer","action","id","composeEnhancers","compose","middleware","applyMiddleware","thunk","store","createStore","reducer","axios_instance","axios","create","baseURL","process","headers","interceptors","request","use","config","response","Req","render","get","then","res","PageSecond","ConnectedCats","catsHOC","desription","App","StorageWrapper","Wrapper","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iOAEMA,EAAO,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACZ,OACI,oCACI,sCACA,4BAAQC,QAASD,GAAjB,cAKZD,EAAKG,aAAe,CAChBF,QAAS,kBAAMG,QAAQC,IAAI,sBAIhBL,QCHAM,eAVS,SAACC,GAAD,MAAY,CAChCC,KAAMD,EAAME,aAGW,SAAEC,GAAF,MAAiB,CACxCT,QAAS,WACLS,EAAS,CAAEC,KAAM,aAIVL,CAA6CN,G,gDCX/CY,EAAiBC,IAAMC,gBAmCrBC,E,2MAhCXR,MAAQ,CACJS,KAAM,CACF,CAAEC,KAAM,S,EAIhBC,OAAS,SAAED,GACP,IAAIE,EAAO,YAAO,EAAKZ,MAAMS,MAC7BG,EAAQC,KAAK,CACTH,SAEJ,EAAKI,SAAS,CAAEL,KAAMG,K,wEAGjB,IACGG,EAAaC,KAAKC,MAAlBF,SACAN,EAASO,KAAKhB,MAAdS,KACR,OACI,kBAACJ,EAAea,SAAhB,CACIC,MAAO,CACHV,OACAE,OAAQK,KAAKL,SAGhBI,O,GAzBKK,a,iBCaPC,EAZM,SAAEC,GAAF,OAAc,SAAEF,GAEjC,OADAvB,QAAQC,IAAKwB,GACN,kBACC,oCACI,kBAAC,IAAD,KACI,+BAAQA,EAAOC,QAEnB,kBAACH,EAAD,U,imBCZhB,IAAMI,EAAoB,CACtBC,QAAQ,EACRC,SAAS,EACTC,OAAQ,GACR1B,KAAM,GACNC,SAAU,CACNqB,MAAO,kBACPK,KAAM,mBAqBCC,EAjBM,WAAyC,IAAvC7B,EAAsC,uDAA9BwB,EAAmBM,EAAW,uCACzD,OAAQA,EAAO1B,MACX,IAAK,OACD,YACOJ,EADP,CAEIC,KAAM,CACF,CACI8B,GAAI,MAKpB,QACI,OAAO/B,ICbbgC,EAA0LC,IAG1LC,EAAaC,YACfC,KAKWC,EAFHC,YAAaC,EAASP,EAAkBE,ICd9CM,EAAiBC,IAAMC,OAAO,CAChCC,QCDKC,yBDELC,QAAS,CACL,kBAAmB,YAI3BL,EAAeM,aAAaC,QAAQC,KAChC,SAAEC,GAEE,OADApD,QAAQC,IAAI,qBAAsBmD,GAC3BA,KAIfT,EAAeM,aAAaI,SAASF,KACjC,SAAEC,GAGE,OAFApD,QAAQC,IAAI,qBAAsBmD,GAClCZ,EAAMlC,SAAS,CAAEC,KAAM,WAChB6C,KAIAT,QEPAW,E,2MAPXC,OAAS,WACL,OACI,gD,mFARJX,EAAMY,IAAI,aACLC,MAAM,SAAAC,GACH1D,QAAQC,IAAI,MAAOyD,U,GAJjBnC,aCFZoC,EAAa,SAAC,GAAiB,IAAf9D,EAAc,EAAdA,QAClB,OACI,oCACI,+CACA,4BAAQC,QAASD,GAAjB,kBAKZ8D,EAAW5D,aAAe,CACtBF,QAAS,kBAAMG,QAAQC,IAAI,sBAIhB0D,QCLTC,EAAgBC,EAAQ,CAAEnC,MAAO,YAAaoC,WAAW,kBAAzCD,CAA6DjE,GAgBpEmE,MAdf,WACE,OACE,6BACE,kBAACC,EAAD,KACI,kBAACJ,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAKK,EAbC,WAEZ,OACI,kBAAC,IAAD,CAAUzB,MAAOA,GACb,kBAAC,IAAD,KACI,kBAAC,EAAD,SCDI0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAShB,OAAO,kBAAC,EAAD,MAASiB,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,kB","file":"static/js/main.fd08f02a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Page = ({ handler }) => {\r\n    return (\r\n        <>\r\n            <h1> Page </h1>\r\n            <button onClick={handler}> Button </button>\r\n        </>\r\n    )\r\n}\r\n\r\nPage.defaultProps = {\r\n    handler: () => console.log('default handlelr')\r\n}\r\n\r\n\r\nexport default Page;","import { connect } from 'react-redux';\r\nimport Page from '../component/page';\r\n\r\nconst mapStateToProps = (state) => ({\r\n    data: state.initData\r\n});\r\n\r\nconst mapDispatchToProps = ( dispatch ) => ({\r\n    handler: () => {\r\n        dispatch({ type: 'BOOM'});\r\n    }\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Page);","import React, { Component } from 'react'\r\n\r\nexport const StorageContext = React.createContext();\r\n\r\nclass Storage extends Component {\r\n    state = { \r\n        cats: [\r\n            { name: '123' }\r\n        ]\r\n    }\r\n\r\n    addCat = ( name ) => {\r\n        let newCats = [...this.state.cats];\r\n        newCats.push({\r\n            name\r\n        });\r\n        this.setState({ cats: newCats });\r\n    }\r\n\r\n    render(){\r\n        const { children } = this.props;\r\n        const { cats } = this.state;\r\n        return(\r\n            <StorageContext.Provider\r\n                value={{\r\n                    cats,\r\n                    addCat: this.addCat\r\n                }}\r\n            >\r\n                {children}\r\n            </StorageContext.Provider>\r\n        )\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default Storage;","import React from 'react'\r\nimport { StorageContext } from './StorageWrapper';\r\nimport Helmet from \"react-helmet\";\r\n\r\n\r\nconst CatsProvider = ( params ) => ( Component ) => {\r\n    console.log( params );\r\n    return () => (\r\n            <>\r\n                <Helmet>\r\n                    <title>{params.title}</title>\r\n                </Helmet>\r\n                <Component/>\r\n            </>\r\n    );\r\n};\r\n\r\nexport default CatsProvider;","const postsInitialState = {\r\n    loaded: false,\r\n    loading: false,\r\n    errors: [],\r\n    data: [],\r\n    initData: {\r\n        title: 'Preloaded Title',\r\n        text: 'Preloaded Text'\r\n    }\r\n};\r\n\r\nconst postsReducer = ( state = postsInitialState, action) => {\r\n    switch( action.type ){\r\n        case 'BOOM':\r\n            return{\r\n                ...state,\r\n                data: [\r\n                    {\r\n                        id: 1\r\n                    }\r\n                ]\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default postsReducer;","import { createStore, applyMiddleware, compose } from \"redux\";\r\n// import logger from './middleware/logger';\r\nimport thunk from 'redux-thunk';\r\nimport reducer from '../reducer';\r\n/*\r\n    Различные миддлвейр которые нужны в нашем проекте.\r\n*/\r\n// import thunk from 'redux-thunk';\r\n// import promises from './middleware/promises';\r\n\r\n// Проверяем мод и если это не продакшн, подключаем redux-dev-tools\r\nconst composeEnhancers = process.env.NODE_ENV !== 'production' && typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__  ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : compose;\r\n\r\n// applyMiddleware -\r\nconst middleware = applyMiddleware(\r\n    thunk\r\n);\r\n\r\nlet store = createStore( reducer, composeEnhancers( middleware ) );\r\n\r\nexport default store;\r\n","import axios from 'axios';\r\nimport config from '../config';\r\nimport store from '../redux/store';\r\n\r\nconst axios_instance = axios.create({\r\n    baseURL: config.url,\r\n    headers: {\r\n        'X-Custom-Header': 'foobar'\r\n    }\r\n});\r\n\r\naxios_instance.interceptors.request.use(\r\n    ( config ) => {\r\n        console.log('axios instance req', config);\r\n        return config;\r\n    }\r\n);\r\n\r\naxios_instance.interceptors.response.use(\r\n    ( config ) => {\r\n        console.log('axios instance res', config);\r\n        store.dispatch({ type: 'LOGOUT' });\r\n        return config;\r\n    }\r\n)\r\n\r\nexport default axios_instance;","export default {\r\n    /*\r\n      Config of application\r\n    */\r\n    url: process.env.REACT_APP_API_URL\r\n}\r\n  ","import React, { Component } from 'react'\r\n\r\nimport axios from '../helpers/axios.instance';\r\n\r\nclass Req extends Component{\r\n    componentDidMount(){\r\n        axios.get('/some-url')\r\n            .then( res => {\r\n                console.log('res', res);\r\n            })\r\n    }\r\n\r\n    render = () => {\r\n        return(\r\n            <h1> Req component </h1>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Req;","import React from 'react'\r\n\r\nconst PageSecond = ({ handler }) => {\r\n    return (\r\n        <>\r\n            <h1> PageSecond HOC</h1>\r\n            <button onClick={handler}> Some click </button>\r\n        </>\r\n    )\r\n}\r\n\r\nPageSecond.defaultProps = {\r\n    handler: () => console.log('default handlelr')\r\n}\r\n\r\n\r\nexport default PageSecond;","import React from 'react';\r\nimport Page from './component/page';\r\nimport ConnectPage from './container/ConnectedPage';\r\n\r\nimport StorageWrapper from './StorageWrapper';\r\n\r\nimport catsHOC from './catsHOC';\r\nimport Req from './component/req';\r\nimport PageSecond from \"./hoc\";\r\n\r\nconst SimpeComp = () => (<h1>Title</h1>)\r\nconst ConnectedCats = catsHOC({ title: 'titleTest', desription:'desriptionTest'})( Page );\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <StorageWrapper>\r\n          <ConnectedCats />\r\n          <ConnectPage />\r\n          <Page />\r\n          <Req />\r\n          <PageSecond />\r\n      </StorageWrapper>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react'\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport App from './App';\r\nimport store from './redux/store';\r\n\r\n\r\nconst Wrapper = () => {\r\n\r\n    return(\r\n        <Provider store={store}>\r\n            <BrowserRouter>\r\n                <App />\r\n            </BrowserRouter>\r\n        </Provider>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Wrapper;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './wrapper';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}